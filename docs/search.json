[{"path":"index.html","id":"welcome","chapter":"Welcome","heading":"Welcome","text":"这是 Mastering Shiny 的在线版本，该书目前正在早期开发中，预计由 O’Reilly Media 于 2020 年底发行。Shiny 是一个使用 R 代码创建 Web 应用程序的框架。它的设计主要考虑了数据科学家的需求，为此，您可以在不了解 HTML、CSS 或 JavaScript 的情况下创建相当复杂的 Shiny 应用程序。另一方面，Shiny 并不限制您创建琐碎或预制的应用程序：它的用户界面组件可以轻松自定义或扩展，并且它的服务器使用反应式编程来让您创建您想要的任何类型的后端逻辑。\nShiny 的设计初衷是让您在刚开始使用时感觉非常简单，但您越深入地了解它的工作原理，您就越会意识到它是由通用构建块构建而成，而这些构建块背后都有强大的软件工程原理。如今，Shiny 的应用领域和行业几乎与 R 本身一样多。\n它在学术界被用作统计概念的教学工具，一种让本科生对学习编写代码感到兴奋的方式，一种炫耀新颖统计方法或模型的引人注目的媒介。\n大型制药公司使用它来加速药物开发过程中科学家和分析师之间的合作。\n硅谷科技公司使用它来设置包含高级分析的实时指标仪表盘。本书旨在帮助您从对 Shiny 一无所知到成为一名专家开发人员，能够编写仍然可维护且高性能的大型复杂应用程序。您将深入了解 Shiny 背后的反应式编程模型，并构建一个包含有用技术的工具箱来解决常见的应用程序挑战。","code":""},{"path":"index.html","id":"license","chapter":"Welcome","heading":"License","text":"book licensed Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License.code samples book licensed Creative Commons CC0 1.0 Universal (CC0 1.0), .e. public domain.","code":""},{"path":"preface.html","id":"preface","chapter":"Preface","heading":"Preface","text":"","code":""},{"path":"preface.html","id":"what-is-shiny","chapter":"Preface","heading":"0.1 What is Shiny?","text":"如果您以前从未使用过 Shiny，欢迎！\nShiny 是一个 R 包，可让您轻松创建丰富的交互式 Web 应用程序。\nShiny 允许您在 R 中进行工作并通过网络浏览器公开它，以便任何人都可以使用它。\nShiny 让您可以轻松地以最少的痛苦来生成精美的 Web 应用程序，从而使您看起来很棒。在过去，创建 Web 应用程序对于大多数 R 用户来说都很困难，因为：您需要深入了解 HTML、CSS 和 JavaScript 等 Web 技术。您需要深入了解 HTML、CSS 和 JavaScript 等 Web 技术。制作复杂的交互式应用程序需要仔细分析交互流，以确保当输入更改时，仅更新相关的输出。制作复杂的交互式应用程序需要仔细分析交互流，以确保当输入更改时，仅更新相关的输出。Shiny 使 R 程序员可以通过以下方式更轻松地创建 Web 应用程序：提供一组精心策划的用户界面（简称 UI）功能，用于生成常见任务所需的 HTML、CSS 和 JavaScript。\n这意味着您不需要了解 HTML/CSS/JavaScript 的详细信息，除非您想要超越 Shiny 为您提供的基础。提供一组精心策划的用户界面（简称 UI）功能，用于生成常见任务所需的 HTML、CSS 和 JavaScript。\n这意味着您不需要了解 HTML/CSS/JavaScript 的详细信息，除非您想要超越 Shiny 为您提供的基础。引入一种称为反应式编程（reactive programming）的新编程风格，它自动跟踪代码片段的依赖关系。\n这意味着每当输入发生变化时，Shiny 都可以自动找出如何做最少的工作来更新所有相关的输出。引入一种称为反应式编程（reactive programming）的新编程风格，它自动跟踪代码片段的依赖关系。\n这意味着每当输入发生变化时，Shiny 都可以自动找出如何做最少的工作来更新所有相关的输出。人们使用 Shiny 来：创建跟踪重要的高级性能指标的仪表盘，同时促进深入了解需要更多调查的指标。创建跟踪重要的高级性能指标的仪表盘，同时促进深入了解需要更多调查的指标。用交互式应用程序替换数百页 PDF，让用户可以跳转到他们关心的结果的确切部分。用交互式应用程序替换数百页 PDF，让用户可以跳转到他们关心的结果的确切部分。通过信息丰富的可视化和交互式敏感性分析，向非技术受众传达复杂的模型。通过信息丰富的可视化和交互式敏感性分析，向非技术受众传达复杂的模型。为常见工作流程提供自助数据分析，用 Shiny 应用程序取代电子邮件请求，允许人们上传自己的数据并执行标准分析。\n您可以为没有编程技能的用户提供复杂的 R 分析。为常见工作流程提供自助数据分析，用 Shiny 应用程序取代电子邮件请求，允许人们上传自己的数据并执行标准分析。\n您可以为没有编程技能的用户提供复杂的 R 分析。创建用于教授统计学和数据科学概念的交互式演示，使学习者能够调整输入并观察分析中这些变化的下游影响。创建用于教授统计学和数据科学概念的交互式演示，使学习者能够调整输入并观察分析中这些变化的下游影响。简而言之，Shiny 使您能够将一些 R 超能力传递给任何可以使用网络的人。","code":""},{"path":"preface.html","id":"who-should-read-this-book","chapter":"Preface","heading":"0.2 Who should read this book?","text":"本书针对两种主要读者：有兴趣了解 Shiny 以便将他们的分析转化为交互式 Web 应用程序的 R 用户。\n为了充分利用本书，您应该能够熟练地使用 R 进行数据分析，并且至少应该编写一些函数。有兴趣了解 Shiny 以便将他们的分析转化为交互式 Web 应用程序的 R 用户。\n为了充分利用本书，您应该能够熟练地使用 R 进行数据分析，并且至少应该编写一些函数。现有的 Shiny 用户希望提高对 Shiny 基础理论的了解，以便更快、更轻松地编写更高质量的应用程序。\n如果您的应用程序开始变得越来越大并且您开始在管理复杂性方面遇到问题，那么您应该会发现这本书特别有帮助。现有的 Shiny 用户希望提高对 Shiny 基础理论的了解，以便更快、更轻松地编写更高质量的应用程序。\n如果您的应用程序开始变得越来越大并且您开始在管理复杂性方面遇到问题，那么您应该会发现这本书特别有帮助。","code":""},{"path":"preface.html","id":"what-will-you-learn","chapter":"Preface","heading":"0.3 What will you learn?","text":"本书分为四个部分：在 “Getting started” 部分，您将学习 Shiny 的基础知识，以便您可以尽快启动并运行。\n您将了解应用程序结构的基础知识、有用的 UI 组件以及响应式编程的基础知识。在 “Getting started” 部分，您将学习 Shiny 的基础知识，以便您可以尽快启动并运行。\n您将了解应用程序结构的基础知识、有用的 UI 组件以及响应式编程的基础知识。“Shiny action” 部分建立在帮助您解决常见问题的基础知识之上，包括向用户提供反馈、上传和下载数据、使用代码生成 UI、减少代码重复以及使用 Shiny 对 tidyverse 进行编程。“Shiny action” 部分建立在帮助您解决常见问题的基础知识之上，包括向用户提供反馈、上传和下载数据、使用代码生成 UI、减少代码重复以及使用 Shiny 对 tidyverse 进行编程。在 “Mastering reactivity” 部分，您将深入了解反应式编程的理论和实践，这是 Shiny 的编程范例。\n如果您是现有的 Shiny 用户，您将从本章中获得最大的价值，因为它将为您提供坚实的理论基础，使您能够创建专门针对您的问题定制的新工具。在 “Mastering reactivity” 部分，您将深入了解反应式编程的理论和实践，这是 Shiny 的编程范例。\n如果您是现有的 Shiny 用户，您将从本章中获得最大的价值，因为它将为您提供坚实的理论基础，使您能够创建专门针对您的问题定制的新工具。最后，在 “Best practices” 部分，我们将完成对使您的 Shiny 应用程序在生产中良好运行的有用技术的调查。\n您将学习如何将复杂的应用程序分解为函数和模块，如何使用包来组织代码，如何测试代码以确保其正确，以及如何衡量和提高性能。最后，在 “Best practices” 部分，我们将完成对使您的 Shiny 应用程序在生产中良好运行的有用技术的调查。\n您将学习如何将复杂的应用程序分解为函数和模块，如何使用包来组织代码，如何测试代码以确保其正确，以及如何衡量和提高性能。","code":""},{"path":"preface.html","id":"what-wont-you-learn","chapter":"Preface","heading":"0.4 What won’t you learn?","text":"本书的重点是制作有效的 Shiny 应用程序并理解反应式的基本理论。\n我将尽力展示数据科学、R 编程和软件工程的最佳实践，但您需要其他参考资料来掌握这些重要技能。\n如果您喜欢我在本书中的写作，您可能会喜欢我关于这些主题的其他书籍：R Data Science、Advanced R 和 R Packages。还有一些特定于 Shiny 的重要主题我没有涉及：本书仅涵盖内置的用户界面工具包。\n这并没有提供最性感的设计，但它很容易学习并且可以让你走得很远。\n如果您有其他需求（或者只是对默认设置感到厌倦），还有许多其他软件包可以提供替代前端。\n参见 Section ?? 获取更多细节。本书仅涵盖内置的用户界面工具包。\n这并没有提供最性感的设计，但它很容易学习并且可以让你走得很远。\n如果您有其他需求（或者只是对默认设置感到厌倦），还有许多其他软件包可以提供替代前端。\n参见 Section ?? 获取更多细节。部署 Shiny 应用程序。\n将 Shiny “投入生产” 超出了本书的讨论范围，因为每个公司的情况差异很大，而且其中大部分与 R 无关（大多数挑战往往是文化或组织方面的，而不是技术方面的）。\n如果您在生产中不熟悉 Shiny，我建议您从 Joe Cheng’s 2019 rstudio::conf keynote: https://rstudio.com/resources/rstudioconf-2019/shiny--production-principles-practices--tools/ 开始。\n这将为您提供基本情况，广泛讨论将 Shiny 投入生产需要什么以及如何克服您可能面临的一些挑战。\n完成此操作后，请访问 RStudio Connect website，了解用于在公司内部署应用程序的 RStudio 产品，并访问 Shiny website了解其他常见部署场景。部署 Shiny 应用程序。\n将 Shiny “投入生产” 超出了本书的讨论范围，因为每个公司的情况差异很大，而且其中大部分与 R 无关（大多数挑战往往是文化或组织方面的，而不是技术方面的）。\n如果您在生产中不熟悉 Shiny，我建议您从 Joe Cheng’s 2019 rstudio::conf keynote: https://rstudio.com/resources/rstudioconf-2019/shiny--production-principles-practices--tools/ 开始。\n这将为您提供基本情况，广泛讨论将 Shiny 投入生产需要什么以及如何克服您可能面临的一些挑战。\n完成此操作后，请访问 RStudio Connect website，了解用于在公司内部署应用程序的 RStudio 产品，并访问 Shiny website了解其他常见部署场景。","code":""},{"path":"preface.html","id":"prerequisites","chapter":"Preface","heading":"0.5 Prerequisites","text":"在我们继续之前，请确保您拥有本书所需的所有软件：R：如果你还没有安装 R，你可能读错书了；我假设您对本书中的 R 有基本的了解。\n如果您想学习如何使用 R，我会推荐我的 R Data Science，它旨在帮助您轻松上手并运行 R。R：如果你还没有安装 R，你可能读错书了；我假设您对本书中的 R 有基本的了解。\n如果您想学习如何使用 R，我会推荐我的 R Data Science，它旨在帮助您轻松上手并运行 R。RStudio：RStudio 是一个免费的开源 R 集成开发环境 (IDE)。\n虽然您可以在任何 R 环境（包括 R GUI 和 ESS）中编写和使用 Shiny 应用程序，但 RStudio 有一些专门用于创作、调试和部署 Shiny 应用程序的出色功能。\n我们建议您尝试一下，但并不需要使用 Shiny 或本书即可获得成功。\n您可以从 https://www.rstudio.com/products/rstudio/download 下载 RStudio Desktop。RStudio：RStudio 是一个免费的开源 R 集成开发环境 (IDE)。\n虽然您可以在任何 R 环境（包括 R GUI 和 ESS）中编写和使用 Shiny 应用程序，但 RStudio 有一些专门用于创作、调试和部署 Shiny 应用程序的出色功能。\n我们建议您尝试一下，但并不需要使用 Shiny 或本书即可获得成功。\n您可以从 https://www.rstudio.com/products/rstudio/download 下载 RStudio Desktop。R packages：本书使用了一堆 R 包。\n您可以通过运行以下命令一次性安装它们：\n\ninstall.packages(c(\n  \"gapminder\", \"ggforce\", \"gh\", \"globals\", \"openintro\", \"profvis\", \n  \"RSQLite\", \"shiny\", \"shinycssloaders\", \"shinyFeedback\", \n  \"shinythemes\", \"testthat\", \"thematic\", \"tidyverse\", \"vroom\", \n  \"waiter\", \"xml2\", \"zeallot\" \n))\n如果您过去下载过 Shiny，请确保您的版本至少为 1.6.0。R packages：本书使用了一堆 R 包。\n您可以通过运行以下命令一次性安装它们：如果您过去下载过 Shiny，请确保您的版本至少为 1.6.0。","code":"\ninstall.packages(c(\n  \"gapminder\", \"ggforce\", \"gh\", \"globals\", \"openintro\", \"profvis\", \n  \"RSQLite\", \"shiny\", \"shinycssloaders\", \"shinyFeedback\", \n  \"shinythemes\", \"testthat\", \"thematic\", \"tidyverse\", \"vroom\", \n  \"waiter\", \"xml2\", \"zeallot\" \n))"},{"path":"preface.html","id":"acknowledgements","chapter":"Preface","heading":"0.6 Acknowledgements","text":"这本书是公开撰写的，完成后各章节会在 Twitter 上发布广告。\n这确实是社区的努力：许多人阅读草稿、修正拼写错误、提出改进建议并贡献内容。\n如果没有这些贡献者，这本书就不会这么好，我非常感谢他们的帮助。big thank 83 people contributed specific improvements via GitHub pull requests (alphabetical order username): Adam Pearce (@1wheel), Adi Sarid (@adisarid), Alexandros Melemenidis (@alex-m-ffm), Anton Klåvus (@antonvsdata), Betsy Rosalen (@betsyrosalen), Michael Beigelmacher (@brooklynbagel), Bryan Smith (@BSCowboy), c1au6io_hh (@c1au6i0), @canovasjm, Chris Beeley (@ChrisBeeley), @chsafouane, Chuliang Xiao (@ChuliangXiao), Conor Neilson (@condwanaland), @d-edison, Dean Attali (@daattali), DanielDavid521 (@Danieldavid521), David Granjon (@DivadNojnarg), Eduardo Vásquez (@edovtp), Emil Hvitfeldt (@EmilHvitfeldt), Emilio (@emilopezcano), Emily Riederer (@emilyriederer), Eric Simms (@esimms999), Federico Marini (@federicomarini), Frederik Kok Hansen (@fkoh111), Frans van Dunné (@FvD), Giorgio Comai (@giocomai), Hedley (@heds1), Henning (@henningsway), Hlynur (@hlynurhallgrims), @hsm207, @jacobxk, James Pooley (@jamespooley), Joe Cheng (@jcheng5), Julien Colomb (@jcolomb), Juan C Rodriguez (@jcrodriguez1989), Jennifer (Jenny) Bryan (@jennybc), Jim Hester (@jimhester), Joachim Gassen (@joachim-gassen), Jon Calder (@jonmcalder), Jonathan Carroll (@jonocarroll), Julian Stanley (@julianstanley), @jyuu, @kaanpekel, Karandeep Singh (@kdpsingh), Robert Kirk DeLisle (@KirkDCO), Elaine (@loomalaine), Malcolm Barrett (@malcolmbarrett), Marly Gotti (@marlycormar), Matthew Wilson (@MattW-Geospatial), Matthew T. Warkentin (@mattwarkentin), Mauro Lepore (@maurolepore), Maximilian Rohde (@maxdrohde), Matthew Berginski (@mbergins), Michael Dewar (@michael-dewar), Mine Cetinkaya-Rundel (@mine-cetinkaya-rundel), Maria Paula Caldas (@mpaulacaldas), nthobservation (@nthobservation), Pietro Monticone (@pitmonticone), psychometrician (@psychometrician), Ram Thapa (@raamthapa), Janko Thyson (@rappster), Rebecca Janis (@rbjanis), Tom Palmer (@remlapmot), Russ Hyde (@russHyde), Barret Schloerke (@schloerke), Scott (@scottyd22), Matthew Sedaghatfar (@sedaghatfar), Shixiang Wang (@ShixiangWang), Praer (Suthira Owlarn) (@sowla), Sébastien Rochette (@statnmap), @stevensbr, André Calero Valdez (@Sumidu), Tanner Stauss (@tmstauss), Tony Fujs (@tonyfujs), Stefan Moog (@trekonom), Jeff Allen (@trestletech), Trey Gilliland (@treygilliland), Albrecht (@Tungurahua), Valeri Voev (@ValeriVoev), Vickus (@Vickusr), William Doane (@WilDoane), 黄湘云 (@XiangyunHuang), gXcloud (@xwydq).","code":"#> Warning: package 'dplyr' was built under R version 4.2.3"},{"path":"preface.html","id":"colophon","chapter":"Preface","heading":"0.7 Colophon","text":"本书是使用 bookdown 在 RStudio 中编写的。\n该网站由 netlify 托管，并在 Github Actions 每次提交后自动更新。完整的源代码可以从 GitHub 获取。本书的这个版本是使用 R 版本 R version 4.2.0 (2022-04-22 ucrt) 和以下软件包构建的：","code":""},{"path":"basic-intro.html","id":"basic-intro","chapter":"Introduction","heading":"Introduction","text":"接下来四章的目标是让您尽快编写 Shiny 应用程序。\n在 Chapter 1 中，我将从小而完整的开始，向您展示应用程序的所有主要部分以及它们如何组合在一起。\n然后在 Chapters ?? 和 ?? 您将开始深入了解 Shiny 应用程序的两个主要部分的详细信息：前端（用户在浏览器中看到的内容）和后端（使其全部正常工作的代码）。\n我们将在 Chapter ?? 结束，通过案例研究来帮助巩固您迄今为止学到的概念。","code":""},{"path":"basic-app.html","id":"basic-app","chapter":"1 Your first Shiny app","heading":"1 Your first Shiny app","text":"","code":""},{"path":"basic-app.html","id":"introduction","chapter":"1 Your first Shiny app","heading":"1.1 Introduction","text":"chapter, ’ll create simple Shiny app.\n’ll start showing minimum boilerplate needed Shiny app, ’ll learn start stop .\nNext ’ll learn two key components every Shiny app: UI (short user interface) defines app looks, server function defines app works.\nShiny uses reactive programming automatically update outputs inputs change ’ll finish chapter learning third important component Shiny apps: reactive expressions.haven’t already installed Shiny, install now :’ve already installed Shiny, use packageVersion(\"shiny\") check version 1.5.0 greater.load current R session:","code":"\ninstall.packages(\"shiny\")\nlibrary(shiny)"},{"path":"basic-app.html","id":"create-app","chapter":"1 Your first Shiny app","heading":"1.2 Create app directory and file","text":"several ways create Shiny app.\nsimplest create new directory app, put single file called app.R .\napp.R file used tell Shiny app look, behave.Try creating new directory, adding app.R file looks like :complete, trivial, Shiny app!\nLooking closely code , app.R four things:calls library(shiny) load shiny package.calls library(shiny) load shiny package.defines user interface, HTML webpage humans interact .\ncase, ’s page containing words “Hello, world!”.defines user interface, HTML webpage humans interact .\ncase, ’s page containing words “Hello, world!”.specifies behaviour app defining server function.\n’s currently empty, app doesn’t anything, ’ll back revisit shortly.specifies behaviour app defining server function.\n’s currently empty, app doesn’t anything, ’ll back revisit shortly.executes shinyApp(ui, server) construct start Shiny application UI server.executes shinyApp(ui, server) construct start Shiny application UI server.RStudio Tip: two convenient ways create new app RStudio:Create new directory app.R file containing basic app one step clicking File | New Project, selecting New Directory Shiny Web Application.Create new directory app.R file containing basic app one step clicking File | New Project, selecting New Directory Shiny Web Application.’ve already created app.R file, can quickly add app boilerplate typing “shinyapp” pressing Shift+Tab.’ve already created app.R file, can quickly add app boilerplate typing “shinyapp” pressing Shift+Tab.","code":"\nlibrary(shiny)\nui <- fluidPage(\n  \"Hello, world!\"\n)\nserver <- function(input, output, session) {\n}\nshinyApp(ui, server)"},{"path":"basic-app.html","id":"running","chapter":"1 Your first Shiny app","heading":"1.3 Running and stopping","text":"ways can run app:Click Run App (Figure 1.1) button document toolbar.Click Run App (Figure 1.1) button document toolbar.Use keyboard shortcut: Cmd/Ctrl + Shift + Enter.Use keyboard shortcut: Cmd/Ctrl + Shift + Enter.’re using RStudio, can (source())1 whole document, call shiny::runApp() path directory containing app.R.’re using RStudio, can (source())1 whole document, call shiny::runApp() path directory containing app.R.\nFigure 1.1: Run App button can found top-right source pane.\nPick one options, check see app Figure 1.2.\nCongratulations!\n’ve made first Shiny app.\nFigure 1.2: basic shiny app ’ll see run code \nclose app, go back RStudio look R console.\n’ll notice says something like:tells URL app can found: 127.0.0.1 standard address means “computer” 3827 randomly assigned port number.\ncan enter URL compatible2 web browser open another copy app.Also notice R busy: R prompt isn’t visible, console toolbar displays stop sign icon.\nShiny app running, “blocks” R console.\nmeans can’t run new commands R console Shiny app stops.can stop app return access console using one options:Click stop sign icon R console toolbar.Click stop sign icon R console toolbar.Click console, press Esc (press Ctrl + C ’re using RStudio).Click console, press Esc (press Ctrl + C ’re using RStudio).Close Shiny app window.Close Shiny app window.basic workflow Shiny app development write code, start app, play app, write code, repeat.\n’re using RStudio, don’t even need stop re-start app see changes — can either press Reload app button toolbox use Cmd/Ctrl + Shift + Enter keyboard shortcut.\n’ll cover workflow patterns Chapter ??.","code":"\n#> Listening on http://127.0.0.1:3827"},{"path":"basic-app.html","id":"adding-ui","chapter":"1 Your first Shiny app","heading":"1.4 Adding UI controls","text":"Next, ’ll add inputs outputs UI ’s quite minimal.\n’re going make simple app shows built-data frames included datasets package.Replace ui code:example uses four new functions:fluidPage() layout function sets basic visual structure page.\n’ll learn Section ??.fluidPage() layout function sets basic visual structure page.\n’ll learn Section ??.selectInput() input control lets user interact app providing value.\ncase, ’s select box label “Dataset” lets choose one built-datasets come R.\n’ll learn inputs Section ??.selectInput() input control lets user interact app providing value.\ncase, ’s select box label “Dataset” lets choose one built-datasets come R.\n’ll learn inputs Section ??.verbatimTextOutput() tableOutput() output controls tell Shiny put rendered output (’ll get moment).\nverbatimTextOutput() displays code tableOutput() displays tables.\n’ll learn outputs Section ??.verbatimTextOutput() tableOutput() output controls tell Shiny put rendered output (’ll get moment).\nverbatimTextOutput() displays code tableOutput() displays tables.\n’ll learn outputs Section ??.Layout functions, inputs, outputs different uses, fundamentally covers: ’re just fancy ways generate HTML, call outside Shiny app, ’ll see HTML printed console.\nDon’t afraid poke around see various layouts controls work hood.Go ahead run app .\n’ll now see Figure 1.3, page containing select box.\nsee input, two outputs, haven’t yet told Shiny input outputs related.\nFigure 1.3: datasets app UI\n","code":"\nui <- fluidPage(\n  selectInput(\"dataset\", label = \"Dataset\", choices = ls(\"package:datasets\")),\n  verbatimTextOutput(\"summary\"),\n  tableOutput(\"table\")\n)"},{"path":"basic-app.html","id":"server-function","chapter":"1 Your first Shiny app","heading":"1.5 Adding behaviour","text":"Next, ’ll bring outputs life defining server function.Shiny uses reactive programming make apps interactive.\n’ll learn reactive programming Chapter ??, now, just aware involves telling Shiny perform computation, ordering Shiny actually go .\n’s like difference giving someone recipe versus demanding go make sandwich.’ll tell Shiny fill summary table outputs sample app providing “recipes” outputs.\nReplace empty server function :left-hand side assignment operator (<-), output$ID, indicates ’re providing recipe Shiny output ID.\nright-hand side assignment uses specific render function wrap code provide.\nrender{Type} function designed produce particular type output (e.g. text, tables, plots), often paired {type}Output function.\nexample, app, renderPrint() paired verbatimTextOutput() display statistical summary fixed-width (verbatim) text, renderTable() paired tableOutput() show input data table.Run app play around, watching happens output change input.\nFigure 1.4 shows see open app.\nFigure 1.4: Now ’ve provided server function connects outputs inputs, fully functional app\nNotice summary table update whenever change input dataset.\ndependency created implicitly ’ve referred input$dataset within output functions.\ninput$dataset populated current value UI component id dataset, cause outputs automatically update whenever value changes.\nessence reactivity: outputs automatically react (recalculate) inputs change.","code":"\nserver <- function(input, output, session) {\n  output$summary <- renderPrint({\n    dataset <- get(input$dataset, \"package:datasets\")\n    summary(dataset)\n  })\n  \n  output$table <- renderTable({\n    dataset <- get(input$dataset, \"package:datasets\")\n    dataset\n  })\n}"},{"path":"basic-app.html","id":"reactive-expr","chapter":"1 Your first Shiny app","heading":"1.6 Reducing duplication with reactive expressions","text":"Even simple example, code ’s duplicated: following line present outputs.every kind programming, ’s poor practice duplicated code; can computationally wasteful, importantly, increases difficulty maintaining debugging code.\n’s important , wanted illustrate basic idea simple context.traditional R scripting, use two techniques deal duplicated code: either capture value using variable, capture computation function.\nUnfortunately neither approaches work , reasons ’ll learn Section ??, need new mechanism: reactive expressions.create reactive expression wrapping block code reactive({...}) assigning variable, use reactive expression calling like function.\nlooks like ’re calling function, reactive expression important difference: runs first time called caches result needs updated.can update server() use reactive expressions, shown .\napp behaves identically, works little efficiently needs retrieve dataset , twice.’ll come back reactive programming multiple times, even armed cursory knowledge inputs, outputs, reactive expressions, ’s possible build quite useful Shiny apps!","code":"\ndataset <- get(input$dataset, \"package:datasets\")\nserver <- function(input, output, session) {\n  # Create a reactive expression\n  dataset <- reactive({\n    get(input$dataset, \"package:datasets\")\n  })\n\n  output$summary <- renderPrint({\n    # Use a reactive expression by calling it like a function\n    summary(dataset())\n  })\n  \n  output$table <- renderTable({\n    dataset()\n  })\n}"},{"path":"basic-app.html","id":"summary","chapter":"1 Your first Shiny app","heading":"1.7 Summary","text":"chapter ’ve created simple app — ’s exciting useful, seen easy construct web app using existing R knowledge.\nnext two chapters, ’ll learn user interfaces reactive programming, two basic building blocks Shiny.\nNow great time grab copy Shiny cheatsheet.\ngreat resource help jog memory main components Shiny app.\nFigure 1.5: Shiny cheatsheet, available https://www.rstudio.com/resources/cheatsheets/\n","code":""},{"path":"basic-app.html","id":"exercises","chapter":"1 Your first Shiny app","heading":"1.8 Exercises","text":"Create app greets user name.\ndon’t know functions need yet, ’ve included lines code .\nThink lines ’ll use copy paste right place Shiny app.\n\ntableOutput(\"mortgage\")\noutput$greeting <- renderText({\n  paste0(\"Hello \", input$name)\n})\nnumericInput(\"age\", \"old ?\", value = NA)\ntextInput(\"name\", \"name?\")\ntextOutput(\"greeting\")\noutput$histogram <- renderPlot({\n  hist(rnorm(1000))\n}, res = 96)Create app greets user name.\ndon’t know functions need yet, ’ve included lines code .\nThink lines ’ll use copy paste right place Shiny app.Suppose friend wants design app allows user set number (x) 1 50, displays result multiplying number 5.\nfirst attempt:\n\nlibrary(shiny)\n\nui <- fluidPage(\n  sliderInput(\"x\", label = \"x \", min = 1, max = 50, value = 30),\n  \"x times 5 \",\n  textOutput(\"product\")\n)\n\nserver <- function(input, output, session) {\n  output$product <- renderText({ \n    x * 5\n  })\n}\n\nshinyApp(ui, server)\nunfortunately error:\n\nCan help find correct error?Suppose friend wants design app allows user set number (x) 1 50, displays result multiplying number 5.\nfirst attempt:unfortunately error:Can help find correct error?Extend app previous exercise allow user set value multiplier, y, app yields value x * y.\nfinal result look like :.\nExtend app previous exercise allow user set value multiplier, y, app yields value x * y.\nfinal result look like :.Take following app adds additional functionality last app described last exercise.\n’s new?\nreduce amount duplicated code app using reactive expression.\n\nlibrary(shiny)\n\nui <- fluidPage(\n  sliderInput(\"x\", \"x \", min = 1, max = 50, value = 30),\n  sliderInput(\"y\", \"y \", min = 1, max = 50, value = 5),\n  \", (x * y) \", textOutput(\"product\"),\n  \", (x * y) + 5 \", textOutput(\"product_plus5\"),\n  \"(x * y) + 10 \", textOutput(\"product_plus10\")\n)\n\nserver <- function(input, output, session) {\n  output$product <- renderText({ \n    product <- input$x * input$y\n    product\n  })\n  output$product_plus5 <- renderText({ \n    product <- input$x * input$y\n    product + 5\n  })\n  output$product_plus10 <- renderText({ \n    product <- input$x * input$y\n    product + 10\n  })\n}\n\nshinyApp(ui, server)Take following app adds additional functionality last app described last exercise.\n’s new?\nreduce amount duplicated code app using reactive expression.following app similar one ’ve seen earlier chapter: select dataset package (time ’re using ggplot2 package) app prints summary plot data.\nalso follows good practice makes use reactive expressions avoid redundancy code.\nHowever three bugs code provided .\nCan find fix ?\n\nlibrary(shiny)\nlibrary(ggplot2)\n#> Warning: package 'ggplot2' built R version 4.2.3\n\ndatasets <- c(\"economics\", \"faithfuld\", \"seals\")\nui <- fluidPage(\n  selectInput(\"dataset\", \"Dataset\", choices = datasets),\n  verbatimTextOutput(\"summary\"),\n  tableOutput(\"plot\")\n)\n\nserver <- function(input, output, session) {\n  dataset <- reactive({\n    get(input$dataset, \"package:ggplot2\")\n  })\n  output$summmry <- renderPrint({\n    summary(dataset())\n  })\n  output$plot <- renderPlot({\n    plot(dataset)\n  }, res = 96)\n}\n\nshinyApp(ui, server)following app similar one ’ve seen earlier chapter: select dataset package (time ’re using ggplot2 package) app prints summary plot data.\nalso follows good practice makes use reactive expressions avoid redundancy code.\nHowever three bugs code provided .\nCan find fix ?","code":"\ntableOutput(\"mortgage\")\noutput$greeting <- renderText({\n  paste0(\"Hello \", input$name)\n})\nnumericInput(\"age\", \"How old are you?\", value = NA)\ntextInput(\"name\", \"What's your name?\")\ntextOutput(\"greeting\")\noutput$histogram <- renderPlot({\n  hist(rnorm(1000))\n}, res = 96)\nlibrary(shiny)\n\nui <- fluidPage(\n  sliderInput(\"x\", label = \"If x is\", min = 1, max = 50, value = 30),\n  \"then x times 5 is\",\n  textOutput(\"product\")\n)\n\nserver <- function(input, output, session) {\n  output$product <- renderText({ \n    x * 5\n  })\n}\n\nshinyApp(ui, server)\nlibrary(shiny)\n\nui <- fluidPage(\n  sliderInput(\"x\", \"If x is\", min = 1, max = 50, value = 30),\n  sliderInput(\"y\", \"and y is\", min = 1, max = 50, value = 5),\n  \"then, (x * y) is\", textOutput(\"product\"),\n  \"and, (x * y) + 5 is\", textOutput(\"product_plus5\"),\n  \"and (x * y) + 10 is\", textOutput(\"product_plus10\")\n)\n\nserver <- function(input, output, session) {\n  output$product <- renderText({ \n    product <- input$x * input$y\n    product\n  })\n  output$product_plus5 <- renderText({ \n    product <- input$x * input$y\n    product + 5\n  })\n  output$product_plus10 <- renderText({ \n    product <- input$x * input$y\n    product + 10\n  })\n}\n\nshinyApp(ui, server)\nlibrary(shiny)\nlibrary(ggplot2)\n#> Warning: package 'ggplot2' was built under R version 4.2.3\n\ndatasets <- c(\"economics\", \"faithfuld\", \"seals\")\nui <- fluidPage(\n  selectInput(\"dataset\", \"Dataset\", choices = datasets),\n  verbatimTextOutput(\"summary\"),\n  tableOutput(\"plot\")\n)\n\nserver <- function(input, output, session) {\n  dataset <- reactive({\n    get(input$dataset, \"package:ggplot2\")\n  })\n  output$summmry <- renderPrint({\n    summary(dataset())\n  })\n  output$plot <- renderPlot({\n    plot(dataset)\n  }, res = 96)\n}\n\nshinyApp(ui, server)"}]
