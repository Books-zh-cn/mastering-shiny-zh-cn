[{"path":"index.html","id":"welcome","chapter":"Welcome","heading":"Welcome","text":"这是 Mastering Shiny 的在线版本，该书目前正在早期开发中，预计由 O’Reilly Media 于 2020 年底发行。Shiny 是一个使用 R 代码创建 Web 应用程序的框架。它的设计主要考虑了数据科学家的需求，为此，您可以在不了解 HTML、CSS 或 JavaScript 的情况下创建相当复杂的 Shiny 应用程序。另一方面，Shiny 并不限制您创建琐碎或预制的应用程序：它的用户界面组件可以轻松自定义或扩展，并且它的服务器使用反应式编程来让您创建您想要的任何类型的后端逻辑。\nShiny 的设计初衷是让您在刚开始使用时感觉非常简单，但您越深入地了解它的工作原理，您就越会意识到它是由通用构建块构建而成，而这些构建块背后都有强大的软件工程原理。如今，Shiny 的应用领域和行业几乎与 R 本身一样多。\n它在学术界被用作统计概念的教学工具，一种让本科生对学习编写代码感到兴奋的方式，一种炫耀新颖统计方法或模型的引人注目的媒介。\n大型制药公司使用它来加速药物开发过程中科学家和分析师之间的合作。\n硅谷科技公司使用它来设置包含高级分析的实时指标仪表盘。本书旨在帮助您从对 Shiny 一无所知到成为一名专家开发人员，能够编写仍然可维护且高性能的大型复杂应用程序。您将深入了解 Shiny 背后的反应式编程模型，并构建一个包含有用技术的工具箱来解决常见的应用程序挑战。","code":""},{"path":"index.html","id":"license","chapter":"Welcome","heading":"License","text":"book licensed Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License.code samples book licensed Creative Commons CC0 1.0 Universal (CC0 1.0), .e. public domain.","code":""},{"path":"preface.html","id":"preface","chapter":"Preface","heading":"Preface","text":"","code":""},{"path":"preface.html","id":"what-is-shiny","chapter":"Preface","heading":"0.1 What is Shiny?","text":"如果您以前从未使用过 Shiny，欢迎！\nShiny 是一个 R 包，可让您轻松创建丰富的交互式 Web 应用程序。\nShiny 允许您在 R 中进行工作并通过网络浏览器公开它，以便任何人都可以使用它。\nShiny 让您可以轻松地以最少的痛苦来生成精美的 Web 应用程序，从而使您看起来很棒。在过去，创建 Web 应用程序对于大多数 R 用户来说都很困难，因为：您需要深入了解 HTML、CSS 和 JavaScript 等 Web 技术。您需要深入了解 HTML、CSS 和 JavaScript 等 Web 技术。制作复杂的交互式应用程序需要仔细分析交互流，以确保当输入更改时，仅更新相关的输出。制作复杂的交互式应用程序需要仔细分析交互流，以确保当输入更改时，仅更新相关的输出。Shiny 使 R 程序员可以通过以下方式更轻松地创建 Web 应用程序：提供一组精心策划的用户界面（简称 UI）功能，用于生成常见任务所需的 HTML、CSS 和 JavaScript。\n这意味着您不需要了解 HTML/CSS/JavaScript 的详细信息，除非您想要超越 Shiny 为您提供的基础。提供一组精心策划的用户界面（简称 UI）功能，用于生成常见任务所需的 HTML、CSS 和 JavaScript。\n这意味着您不需要了解 HTML/CSS/JavaScript 的详细信息，除非您想要超越 Shiny 为您提供的基础。引入一种称为反应式编程（reactive programming）的新编程风格，它自动跟踪代码片段的依赖关系。\n这意味着每当输入发生变化时，Shiny 都可以自动找出如何做最少的工作来更新所有相关的输出。引入一种称为反应式编程（reactive programming）的新编程风格，它自动跟踪代码片段的依赖关系。\n这意味着每当输入发生变化时，Shiny 都可以自动找出如何做最少的工作来更新所有相关的输出。人们使用 Shiny 来：创建跟踪重要的高级性能指标的仪表盘，同时促进深入了解需要更多调查的指标。创建跟踪重要的高级性能指标的仪表盘，同时促进深入了解需要更多调查的指标。用交互式应用程序替换数百页 PDF，让用户可以跳转到他们关心的结果的确切部分。用交互式应用程序替换数百页 PDF，让用户可以跳转到他们关心的结果的确切部分。通过信息丰富的可视化和交互式敏感性分析，向非技术受众传达复杂的模型。通过信息丰富的可视化和交互式敏感性分析，向非技术受众传达复杂的模型。为常见工作流程提供自助数据分析，用 Shiny 应用程序取代电子邮件请求，允许人们上传自己的数据并执行标准分析。\n您可以为没有编程技能的用户提供复杂的 R 分析。为常见工作流程提供自助数据分析，用 Shiny 应用程序取代电子邮件请求，允许人们上传自己的数据并执行标准分析。\n您可以为没有编程技能的用户提供复杂的 R 分析。创建用于教授统计学和数据科学概念的交互式演示，使学习者能够调整输入并观察分析中这些变化的下游影响。创建用于教授统计学和数据科学概念的交互式演示，使学习者能够调整输入并观察分析中这些变化的下游影响。简而言之，Shiny 使您能够将一些 R 超能力传递给任何可以使用网络的人。","code":""},{"path":"preface.html","id":"who-should-read-this-book","chapter":"Preface","heading":"0.2 Who should read this book?","text":"本书针对两种主要读者：有兴趣了解 Shiny 以便将他们的分析转化为交互式 Web 应用程序的 R 用户。\n为了充分利用本书，您应该能够熟练地使用 R 进行数据分析，并且至少应该编写一些函数。有兴趣了解 Shiny 以便将他们的分析转化为交互式 Web 应用程序的 R 用户。\n为了充分利用本书，您应该能够熟练地使用 R 进行数据分析，并且至少应该编写一些函数。现有的 Shiny 用户希望提高对 Shiny 基础理论的了解，以便更快、更轻松地编写更高质量的应用程序。\n如果您的应用程序开始变得越来越大并且您开始在管理复杂性方面遇到问题，那么您应该会发现这本书特别有帮助。现有的 Shiny 用户希望提高对 Shiny 基础理论的了解，以便更快、更轻松地编写更高质量的应用程序。\n如果您的应用程序开始变得越来越大并且您开始在管理复杂性方面遇到问题，那么您应该会发现这本书特别有帮助。","code":""},{"path":"preface.html","id":"what-will-you-learn","chapter":"Preface","heading":"0.3 What will you learn?","text":"本书分为四个部分：在 “Getting started” 部分，您将学习 Shiny 的基础知识，以便您可以尽快启动并运行。\n您将了解应用程序结构的基础知识、有用的 UI 组件以及响应式编程的基础知识。在 “Getting started” 部分，您将学习 Shiny 的基础知识，以便您可以尽快启动并运行。\n您将了解应用程序结构的基础知识、有用的 UI 组件以及响应式编程的基础知识。“Shiny action” 部分建立在帮助您解决常见问题的基础知识之上，包括向用户提供反馈、上传和下载数据、使用代码生成 UI、减少代码重复以及使用 Shiny 对 tidyverse 进行编程。“Shiny action” 部分建立在帮助您解决常见问题的基础知识之上，包括向用户提供反馈、上传和下载数据、使用代码生成 UI、减少代码重复以及使用 Shiny 对 tidyverse 进行编程。在 “Mastering reactivity” 部分，您将深入了解反应式编程的理论和实践，这是 Shiny 的编程范例。\n如果您是现有的 Shiny 用户，您将从本章中获得最大的价值，因为它将为您提供坚实的理论基础，使您能够创建专门针对您的问题定制的新工具。在 “Mastering reactivity” 部分，您将深入了解反应式编程的理论和实践，这是 Shiny 的编程范例。\n如果您是现有的 Shiny 用户，您将从本章中获得最大的价值，因为它将为您提供坚实的理论基础，使您能够创建专门针对您的问题定制的新工具。最后，在 “Best practices” 部分，我们将完成对使您的 Shiny 应用程序在生产中良好运行的有用技术的调查。\n您将学习如何将复杂的应用程序分解为函数和模块，如何使用包来组织代码，如何测试代码以确保其正确，以及如何衡量和提高性能。最后，在 “Best practices” 部分，我们将完成对使您的 Shiny 应用程序在生产中良好运行的有用技术的调查。\n您将学习如何将复杂的应用程序分解为函数和模块，如何使用包来组织代码，如何测试代码以确保其正确，以及如何衡量和提高性能。","code":""},{"path":"preface.html","id":"what-wont-you-learn","chapter":"Preface","heading":"0.4 What won’t you learn?","text":"本书的重点是制作有效的 Shiny 应用程序并理解反应式的基本理论。\n我将尽力展示数据科学、R 编程和软件工程的最佳实践，但您需要其他参考资料来掌握这些重要技能。\n如果您喜欢我在本书中的写作，您可能会喜欢我关于这些主题的其他书籍：R Data Science、Advanced R 和 R Packages。还有一些特定于 Shiny 的重要主题我没有涉及：本书仅涵盖内置的用户界面工具包。\n这并没有提供最性感的设计，但它很容易学习并且可以让你走得很远。\n如果您有其他需求（或者只是对默认设置感到厌倦），还有许多其他软件包可以提供替代前端。\n参见 Section ?? 获取更多细节。本书仅涵盖内置的用户界面工具包。\n这并没有提供最性感的设计，但它很容易学习并且可以让你走得很远。\n如果您有其他需求（或者只是对默认设置感到厌倦），还有许多其他软件包可以提供替代前端。\n参见 Section ?? 获取更多细节。部署 Shiny 应用程序。\n将 Shiny “投入生产” 超出了本书的讨论范围，因为每个公司的情况差异很大，而且其中大部分与 R 无关（大多数挑战往往是文化或组织方面的，而不是技术方面的）。\n如果您在生产中不熟悉 Shiny，我建议您从 Joe Cheng’s 2019 rstudio::conf keynote: https://rstudio.com/resources/rstudioconf-2019/shiny--production-principles-practices--tools/ 开始。\n这将为您提供基本情况，广泛讨论将 Shiny 投入生产需要什么以及如何克服您可能面临的一些挑战。\n完成此操作后，请访问 RStudio Connect website，了解用于在公司内部署应用程序的 RStudio 产品，并访问 Shiny website了解其他常见部署场景。部署 Shiny 应用程序。\n将 Shiny “投入生产” 超出了本书的讨论范围，因为每个公司的情况差异很大，而且其中大部分与 R 无关（大多数挑战往往是文化或组织方面的，而不是技术方面的）。\n如果您在生产中不熟悉 Shiny，我建议您从 Joe Cheng’s 2019 rstudio::conf keynote: https://rstudio.com/resources/rstudioconf-2019/shiny--production-principles-practices--tools/ 开始。\n这将为您提供基本情况，广泛讨论将 Shiny 投入生产需要什么以及如何克服您可能面临的一些挑战。\n完成此操作后，请访问 RStudio Connect website，了解用于在公司内部署应用程序的 RStudio 产品，并访问 Shiny website了解其他常见部署场景。","code":""},{"path":"preface.html","id":"prerequisites","chapter":"Preface","heading":"0.5 Prerequisites","text":"在我们继续之前，请确保您拥有本书所需的所有软件：R：如果你还没有安装 R，你可能读错书了；我假设您对本书中的 R 有基本的了解。\n如果您想学习如何使用 R，我会推荐我的 R Data Science，它旨在帮助您轻松上手并运行 R。R：如果你还没有安装 R，你可能读错书了；我假设您对本书中的 R 有基本的了解。\n如果您想学习如何使用 R，我会推荐我的 R Data Science，它旨在帮助您轻松上手并运行 R。RStudio：RStudio 是一个免费的开源 R 集成开发环境 (IDE)。\n虽然您可以在任何 R 环境（包括 R GUI 和 ESS）中编写和使用 Shiny 应用程序，但 RStudio 有一些专门用于创作、调试和部署 Shiny 应用程序的出色功能。\n我们建议您尝试一下，但并不需要使用 Shiny 或本书即可获得成功。\n您可以从 https://www.rstudio.com/products/rstudio/download 下载 RStudio Desktop。RStudio：RStudio 是一个免费的开源 R 集成开发环境 (IDE)。\n虽然您可以在任何 R 环境（包括 R GUI 和 ESS）中编写和使用 Shiny 应用程序，但 RStudio 有一些专门用于创作、调试和部署 Shiny 应用程序的出色功能。\n我们建议您尝试一下，但并不需要使用 Shiny 或本书即可获得成功。\n您可以从 https://www.rstudio.com/products/rstudio/download 下载 RStudio Desktop。R packages：本书使用了一堆 R 包。\n您可以通过运行以下命令一次性安装它们：\n\ninstall.packages(c(\n  \"gapminder\", \"ggforce\", \"gh\", \"globals\", \"openintro\", \"profvis\", \n  \"RSQLite\", \"shiny\", \"shinycssloaders\", \"shinyFeedback\", \n  \"shinythemes\", \"testthat\", \"thematic\", \"tidyverse\", \"vroom\", \n  \"waiter\", \"xml2\", \"zeallot\" \n))\n如果您过去下载过 Shiny，请确保您的版本至少为 1.6.0。R packages：本书使用了一堆 R 包。\n您可以通过运行以下命令一次性安装它们：如果您过去下载过 Shiny，请确保您的版本至少为 1.6.0。","code":"\ninstall.packages(c(\n  \"gapminder\", \"ggforce\", \"gh\", \"globals\", \"openintro\", \"profvis\", \n  \"RSQLite\", \"shiny\", \"shinycssloaders\", \"shinyFeedback\", \n  \"shinythemes\", \"testthat\", \"thematic\", \"tidyverse\", \"vroom\", \n  \"waiter\", \"xml2\", \"zeallot\" \n))"},{"path":"preface.html","id":"acknowledgements","chapter":"Preface","heading":"0.6 Acknowledgements","text":"这本书是公开撰写的，完成后各章节会在 Twitter 上发布广告。\n这确实是社区的努力：许多人阅读草稿、修正拼写错误、提出改进建议并贡献内容。\n如果没有这些贡献者，这本书就不会这么好，我非常感谢他们的帮助。big thank 83 people contributed specific improvements via GitHub pull requests (alphabetical order username): Adam Pearce (@1wheel), Adi Sarid (@adisarid), Alexandros Melemenidis (@alex-m-ffm), Anton Klåvus (@antonvsdata), Betsy Rosalen (@betsyrosalen), Michael Beigelmacher (@brooklynbagel), Bryan Smith (@BSCowboy), c1au6io_hh (@c1au6i0), @canovasjm, Chris Beeley (@ChrisBeeley), @chsafouane, Chuliang Xiao (@ChuliangXiao), Conor Neilson (@condwanaland), @d-edison, Dean Attali (@daattali), DanielDavid521 (@Danieldavid521), David Granjon (@DivadNojnarg), Eduardo Vásquez (@edovtp), Emil Hvitfeldt (@EmilHvitfeldt), Emilio (@emilopezcano), Emily Riederer (@emilyriederer), Eric Simms (@esimms999), Federico Marini (@federicomarini), Frederik Kok Hansen (@fkoh111), Frans van Dunné (@FvD), Giorgio Comai (@giocomai), Hedley (@heds1), Henning (@henningsway), Hlynur (@hlynurhallgrims), @hsm207, @jacobxk, James Pooley (@jamespooley), Joe Cheng (@jcheng5), Julien Colomb (@jcolomb), Juan C Rodriguez (@jcrodriguez1989), Jennifer (Jenny) Bryan (@jennybc), Jim Hester (@jimhester), Joachim Gassen (@joachim-gassen), Jon Calder (@jonmcalder), Jonathan Carroll (@jonocarroll), Julian Stanley (@julianstanley), @jyuu, @kaanpekel, Karandeep Singh (@kdpsingh), Robert Kirk DeLisle (@KirkDCO), Elaine (@loomalaine), Malcolm Barrett (@malcolmbarrett), Marly Gotti (@marlycormar), Matthew Wilson (@MattW-Geospatial), Matthew T. Warkentin (@mattwarkentin), Mauro Lepore (@maurolepore), Maximilian Rohde (@maxdrohde), Matthew Berginski (@mbergins), Michael Dewar (@michael-dewar), Mine Cetinkaya-Rundel (@mine-cetinkaya-rundel), Maria Paula Caldas (@mpaulacaldas), nthobservation (@nthobservation), Pietro Monticone (@pitmonticone), psychometrician (@psychometrician), Ram Thapa (@raamthapa), Janko Thyson (@rappster), Rebecca Janis (@rbjanis), Tom Palmer (@remlapmot), Russ Hyde (@russHyde), Barret Schloerke (@schloerke), Scott (@scottyd22), Matthew Sedaghatfar (@sedaghatfar), Shixiang Wang (@ShixiangWang), Praer (Suthira Owlarn) (@sowla), Sébastien Rochette (@statnmap), @stevensbr, André Calero Valdez (@Sumidu), Tanner Stauss (@tmstauss), Tony Fujs (@tonyfujs), Stefan Moog (@trekonom), Jeff Allen (@trestletech), Trey Gilliland (@treygilliland), Albrecht (@Tungurahua), Valeri Voev (@ValeriVoev), Vickus (@Vickusr), William Doane (@WilDoane), 黄湘云 (@XiangyunHuang), gXcloud (@xwydq).","code":"#> Warning: package 'dplyr' was built under R version 4.2.3"},{"path":"preface.html","id":"colophon","chapter":"Preface","heading":"0.7 Colophon","text":"本书是使用 bookdown 在 RStudio 中编写的。\n该网站由 netlify 托管，并在 Github Actions 每次提交后自动更新。完整的源代码可以从 GitHub 获取。本书的这个版本是使用 R 版本 R version 4.2.0 (2022-04-22 ucrt) 和以下软件包构建的：","code":""},{"path":"basic-intro.html","id":"basic-intro","chapter":"Introduction","heading":"Introduction","text":"接下来四章的目标是让您尽快编写 Shiny 应用程序。\n在 Chapter 1 中，我将从小而完整的开始，向您展示应用程序的所有主要部分以及它们如何组合在一起。\n然后在 Chapters 2 和 ?? 您将开始深入了解 Shiny 应用程序的两个主要部分的详细信息：前端（用户在浏览器中看到的内容）和后端（使其全部正常工作的代码）。\n我们将在 Chapter ?? 结束，通过案例研究来帮助巩固您迄今为止学到的概念。","code":""},{"path":"basic-app.html","id":"basic-app","chapter":"1 Your first Shiny app","heading":"1 Your first Shiny app","text":"","code":""},{"path":"basic-app.html","id":"introduction","chapter":"1 Your first Shiny app","heading":"1.1 Introduction","text":"在本章中，我们将创建一个简单的 Shiny app。\n我将首先向您展示 Shiny app 所需的最小样板，然后您将学习如何启动和停止它。\n接下来，您将学习每个 Shiny app 的两个关键组件：定义 app 外观的 UI（user interface 的缩写），和定义 app 工作方式的 server function。\nShiny 使用响应式编程（reactive programming）在输入变化时自动更新输出，因此我们将通过学习 Shiny app 的第三个重要组件来结束本章：响应式表达式（reactive expressions）。如果您尚未安装 Shiny，请立即安装：如果您已经安装了 Shiny，请使用 packageVersion(\"shiny\") 检查您是否拥有 1.5.0 或更高版本。然后加载当前的 R 会话：","code":"\ninstall.packages(\"shiny\")\nlibrary(shiny)"},{"path":"basic-app.html","id":"create-app","chapter":"1 Your first Shiny app","heading":"1.2 Create app directory and file","text":"有多种方法可以创建 Shiny app。\n最简单的方法是为您的 app 创建一个新目录，并在其中放置一个名为 app.R 的文件。\n这个 app.R 文件将用于告诉 Shiny 您的 app 应该如何显示以及它应该如何运行。通过创建一个新目录并添加一个如下所示的 app.R 文件来尝试一下：这是一个完整但微不足道的 Shiny app！\n仔细观察上面的代码，我们的 app.R 做了四件事：它调用 library(shiny) 来加载 shiny 包。它调用 library(shiny) 来加载 shiny 包。它定义了用户界面，即人类与之交互的 HTML 网页。\n在本例中，它是一个包含 “Hello, world!” 字样的页面。它定义了用户界面，即人类与之交互的 HTML 网页。\n在本例中，它是一个包含 “Hello, world!” 字样的页面。它通过定义 server 函数来指定我们 app 的行为。\n它目前是空的，所以我们的应用程序不执行任何操作，但我们很快就会回来重新讨论这个问题。它通过定义 server 函数来指定我们 app 的行为。\n它目前是空的，所以我们的应用程序不执行任何操作，但我们很快就会回来重新讨论这个问题。它执行 shinyApp(ui, server) 来从 UI 和 server 构建并启动 Shiny app。它执行 shinyApp(ui, server) 来从 UI 和 server 构建并启动 Shiny app。RStudio Tip: 在 RStudio 中创建一个新的 app 有两种便捷的方法：单击 File | New Project 创建一个新目录和一个包含基本 app 的 app.R 文件，然后选择 New Directory 和 Shiny Web Application。单击 File | New Project 创建一个新目录和一个包含基本 app 的 app.R 文件，然后选择 New Directory 和 Shiny Web Application。如果您已经创建了 app.R 文件，则可以通过键入 “shinyapp” 并按 Shift+Tab 快速添加 app 样板。如果您已经创建了 app.R 文件，则可以通过键入 “shinyapp” 并按 Shift+Tab 快速添加 app 样板。","code":"\nlibrary(shiny)\nui <- fluidPage(\n  \"Hello, world!\"\n)\nserver <- function(input, output, session) {\n}\nshinyApp(ui, server)"},{"path":"basic-app.html","id":"running","chapter":"1 Your first Shiny app","heading":"1.3 Running and stopping","text":"您可以通过以下几种方式运行此 app：单击文档工具栏中的 Run App (Figure 1.1) 按钮。单击文档工具栏中的 Run App (Figure 1.1) 按钮。使用键盘快捷键：Cmd/Ctrl + Shift + Enter。使用键盘快捷键：Cmd/Ctrl + Shift + Enter。如果您不使用 RStudio，您可以 (source())1 整个文档，或者使用包含 app.R 的目录的路径调用 shiny::runApp()。如果您不使用 RStudio，您可以 (source())1 整个文档，或者使用包含 app.R 的目录的路径调用 shiny::runApp()。\nFigure 1.1: Run App 按钮位于源窗格的右上角。\n选择这些选项之一，并检查您是否看到与 Figure 1.2 中相同的 app。\n恭喜！\n您已经制作了第一个 Shiny app。\nFigure 1.2: 当您运行上面的代码时，您将看到一个非常基本的 shiny app\n在关闭 app 之前，请返回 RStudio 并查看 R console。\n你会注意到它说的是这样的：这告诉您可以找到您的 app 的 URL：127.0.0.1 是一个标准地址，表示“这台计算机”，3827 是一个随机分配的端口号（port）。\n您可以在任何兼容的2网络浏览器中输入该 URL 以打开你的 app 的另一个副本。另请注意 R 正忙：R 提示不可见，并且控制台工具栏显示停止标志图标。\n当 Shiny app 运行时，它会“阻止” R console。\n这意味着在 Shiny app 停止之前，您无法在 R console 上运行新命令。您可以使用以下任一选项停止 app 并返回对 console 的访问权限：单击 R console 工具栏上的停止标志图标。单击 R console 工具栏上的停止标志图标。单击 console，然后按 Esc（如果您不使用 RStudio，则按 Ctrl + C）。单击 console，然后按 Esc（如果您不使用 RStudio，则按 Ctrl + C）。关闭 Shiny app 窗口。关闭 Shiny app 窗口。Shiny app 开发的基本工作流程是编写一些代码，启动 app，使用 app，编写更多代码，然后重复。\n如果您使用的是 RStudio，您甚至不需要停止并重新启动应用程序即可查看更改 — 您可以按工具箱中的 Reload app 按钮或使用 Cmd/Ctrl + Shift + Enter 键盘快捷键。\n我将在 Chapter ?? 中介绍其他工作流程模式。","code":"\n#> Listening on http://127.0.0.1:3827"},{"path":"basic-app.html","id":"adding-ui","chapter":"1 Your first Shiny app","heading":"1.4 Adding UI controls","text":"接下来，我们将向 UI 添加一些输入和输出，这样它就不会那么小了。\n我们将制作一个非常简单的 app，向您显示 datasets 包中包含的所有内置 data frames。将您的 ui 替换为以下代码：此示例使用四个新函数：fluidPage() 是一个 layout function，用于设置页面的基本视觉结构。\n您将在 Section ?? 中了解有关它们的更多信息。fluidPage() 是一个 layout function，用于设置页面的基本视觉结构。\n您将在 Section ?? 中了解有关它们的更多信息。selectInput() 是一个 input control，允许用户通过提供值（value）与 app 交互。\n在本例中，它是一个带有 “Dataset” 标签的选择框，可让您选择 R 附带的内置数据集之一。\n您将在 Section 2.2 中了解有关输入的更多信息。selectInput() 是一个 input control，允许用户通过提供值（value）与 app 交互。\n在本例中，它是一个带有 “Dataset” 标签的选择框，可让您选择 R 附带的内置数据集之一。\n您将在 Section 2.2 中了解有关输入的更多信息。verbatimTextOutput() 和 tableOutput() 是 output controls，它们告诉 Shiny 将渲染的输出放在哪里（我们稍后会介绍如何放置）。\nverbatimTextOutput() 显示代码，tableOutput() 显示表格。\n您将在 Section 2.3 中了解有关输出的更多信息。verbatimTextOutput() 和 tableOutput() 是 output controls，它们告诉 Shiny 将渲染的输出放在哪里（我们稍后会介绍如何放置）。\nverbatimTextOutput() 显示代码，tableOutput() 显示表格。\n您将在 Section 2.3 中了解有关输出的更多信息。布局函数、输入和输出有不同的用途，但它们本质上是相同的：它们都是生成 HTML 的奇特方法，如果您在 Shiny app 之外调用其中任何一个，您将看到 HTML 在控制台打印出来。\n不要害怕四处探索，看看这些不同的布局和控件在幕后是如何工作的。继续并再次运行该 app。\n现在您将看到 Figure 1.3，这是一个包含选择框的页面。\n我们只看到输入，看不到两个输出，因为我们还没有告诉 Shiny 输入和输出是如何关联的。\nFigure 1.3: datasets app UI\n","code":"\nui <- fluidPage(\n  selectInput(\"dataset\", label = \"Dataset\", choices = ls(\"package:datasets\")),\n  verbatimTextOutput(\"summary\"),\n  tableOutput(\"table\")\n)"},{"path":"basic-app.html","id":"server-function","chapter":"1 Your first Shiny app","heading":"1.5 Adding behaviour","text":"接下来，我们将通过在 server 函数中定义输出来使输出变得生动。Shiny 使用响应式编程使 apps 具有交互性。\n您将在 Chapter ?? 中了解有关响应式编程的更多信息，但现在请注意，它涉及告诉 Shiny 如何执行计算，而不是命令 Shiny 实际执行计算。\n这就像给某人一个菜谱和要求他们给你做一个三明治之间的区别。我们将通过提供这些输出的“配方”来告诉 Shiny 如何在示例 app 中填写 summary 和 table 输出。\n将空的 server 函数替换为：赋值运算符 (<-) 的左侧，output$ID，表示您正在为具有该 ID 的 Shiny 输出提供配方。\n赋值的右侧使用特定的渲染函数（render function）来包装您提供的一些代码。\n每个 render{Type} 函数都旨在生成特定类型的输出（例如文本、表格和绘图），并且通常与 {type}Output 函数配对。\n例如，在此 app 中，renderPrint() 与 verbatimTextOutput() 配合使用，以显示固定宽度（逐字）文本的统计摘要，而 renderTable() 与 tableOutput() 配合使用，以在表格中显示输入数据。再次运行 app 并进行测试，观察更改输入时输出会发生什么情况。\nFigure 1.4 显示了打开 app 时应该看到的内容。\nFigure 1.4: 现在我们已经提供了连接输出和输入的 server function，我们有了一个功能齐全的 app\n请注意，每当您更改输入数据集时，摘要和表格都会更新。\n这种依赖关系是隐式创建的，因为我们在输出函数中引用了 input$dataset。\ninput$dataset 填充了带有 id dataset 的 UI 组件的当前值，并且每当该值发生变化时都会导致输出自动更新。\n这是响应式（reactivity）的本质：当输入发生变化时，输出会自动做出响应（重新计算）。","code":"\nserver <- function(input, output, session) {\n  output$summary <- renderPrint({\n    dataset <- get(input$dataset, \"package:datasets\")\n    summary(dataset)\n  })\n  \n  output$table <- renderTable({\n    dataset <- get(input$dataset, \"package:datasets\")\n    dataset\n  })\n}"},{"path":"basic-app.html","id":"reactive-expr","chapter":"1 Your first Shiny app","heading":"1.6 Reducing duplication with reactive expressions","text":"即使在这个简单的示例中，我们也有一些重复的代码：两个输出中都存在以下行。在每种编程中，重复代码都是不好的做法；它可能会造成计算浪费，更重要的是，它增加了维护或调试代码的难度。\n这在这里并不重要，但我想在一个非常简单的上下文中说明基本思想。不幸的是，这些方法在这里都不起作用，原因您将在 Section ?? 中了解，并且我们需要一种新机制：响应式表达式（reactive expressions）。您可以通过将代码块包装在 reactive({...}) 中并将其分配给变量来创建响应式表达式，然后通过像函数一样调用它来使用响应式表达式。\n但是，虽然看起来像是在调用函数，但响应式表达式有一个重要的区别：它仅在第一次调用时运行，然后缓存其结果，直到需要更新为止。我们可以更新我们的 server() 以使用响应式表达式，如下所示。\n该 app 的行为相同，但工作效率更高一些，因为它只需要检索数据集一次，而不是两次。我们将多次回到响应式编程，但即使具备输入、输出和响应式表达式的粗略知识，也可以构建非常有用的 Shiny apps！","code":"\ndataset <- get(input$dataset, \"package:datasets\")\nserver <- function(input, output, session) {\n  # Create a reactive expression\n  dataset <- reactive({\n    get(input$dataset, \"package:datasets\")\n  })\n\n  output$summary <- renderPrint({\n    # Use a reactive expression by calling it like a function\n    summary(dataset())\n  })\n  \n  output$table <- renderTable({\n    dataset()\n  })\n}"},{"path":"basic-app.html","id":"summary","chapter":"1 Your first Shiny app","heading":"1.7 Summary","text":"在本章中，您创建了一个简单的 app — 它不是很令人兴奋或有用，但您看到了使用现有的 R 知识构建一个 web app 是多么容易。\n在接下来的两章中，您将了解有关用户界面和响应式编程的更多信息，这是 Shiny 的两个基本构建块。\n现在是获取 Shiny cheatsheet 的好时机。\n这是一个很好的资源，可以帮助您回忆 Shiny app 的主要组件。\nFigure 1.5: Shiny cheatsheet, available https://www.rstudio.com/resources/cheatsheets/\n","code":""},{"path":"basic-app.html","id":"exercises","chapter":"1 Your first Shiny app","heading":"1.8 Exercises","text":"创建一个通过名字向用户打招呼的 app。\n您还不知道执行此操作所需的所有函数，因此我在下面添加了一些代码行。\n考虑一下您将使用哪些行，然后将它们复制并粘贴到 Shiny app 中的正确位置。\n\ntableOutput(\"mortgage\")\noutput$greeting <- renderText({\n  paste0(\"Hello \", input$name)\n})\nnumericInput(\"age\", \"old ?\", value = NA)\ntextInput(\"name\", \"name?\")\ntextOutput(\"greeting\")\noutput$histogram <- renderPlot({\n  hist(rnorm(1000))\n}, res = 96)创建一个通过名字向用户打招呼的 app。\n您还不知道执行此操作所需的所有函数，因此我在下面添加了一些代码行。\n考虑一下您将使用哪些行，然后将它们复制并粘贴到 Shiny app 中的正确位置。假设您的朋友想要设计一个 app，允许用户设置 1 到 50 之间的数字 (x)，并显示该数字乘以 5 的结果。\n这是他们的第一次尝试：\n\nlibrary(shiny)\n\nui <- fluidPage(\n  sliderInput(\"x\", label = \"x \", min = 1, max = 50, value = 30),\n  \"x times 5 \",\n  textOutput(\"product\")\n)\n\nserver <- function(input, output, session) {\n  output$product <- renderText({ \n    x * 5\n  })\n}\n\nshinyApp(ui, server)\n但不幸的是它有一个错误：\n\n你能帮助他们找到并纠正错误吗？假设您的朋友想要设计一个 app，允许用户设置 1 到 50 之间的数字 (x)，并显示该数字乘以 5 的结果。\n这是他们的第一次尝试：但不幸的是它有一个错误：你能帮助他们找到并纠正错误吗？扩展上一个练习中的 app，以允许用户设置乘数 y 的值，以便应用程序生成 x * y 的值。\n最终结果应该是这样的：\n扩展上一个练习中的 app，以允许用户设置乘数 y 的值，以便应用程序生成 x * y 的值。\n最终结果应该是这样的：使用以下 app，它为上一个练习中描述的最后一个 app 添加了一些附加功能。\n什么是新的？\n如何通过使用响应式表达式来减少 app 中重复代码的数量。\n\nlibrary(shiny)\n\nui <- fluidPage(\n  sliderInput(\"x\", \"x \", min = 1, max = 50, value = 30),\n  sliderInput(\"y\", \"y \", min = 1, max = 50, value = 5),\n  \", (x * y) \", textOutput(\"product\"),\n  \", (x * y) + 5 \", textOutput(\"product_plus5\"),\n  \"(x * y) + 10 \", textOutput(\"product_plus10\")\n)\n\nserver <- function(input, output, session) {\n  output$product <- renderText({ \n    product <- input$x * input$y\n    product\n  })\n  output$product_plus5 <- renderText({ \n    product <- input$x * input$y\n    product + 5\n  })\n  output$product_plus10 <- renderText({ \n    product <- input$x * input$y\n    product + 10\n  })\n}\n\nshinyApp(ui, server)使用以下 app，它为上一个练习中描述的最后一个 app 添加了一些附加功能。\n什么是新的？\n如何通过使用响应式表达式来减少 app 中重复代码的数量。以下 app 与您在本章前面看到的 app 非常相似：您从包中选择一个数据集（这次我们使用 ggplot2 包），然后该 app 打印出数据的摘要和绘图。\n它还遵循良好实践并利用响应式表达式来避免代码冗余。\n然而，下面提供的代码中存在三个错误。\n你能找到并修复它们吗？\n\nlibrary(shiny)\nlibrary(ggplot2)\n#> Warning: package 'ggplot2' built R version 4.2.3\n\ndatasets <- c(\"economics\", \"faithfuld\", \"seals\")\nui <- fluidPage(\n  selectInput(\"dataset\", \"Dataset\", choices = datasets),\n  verbatimTextOutput(\"summary\"),\n  tableOutput(\"plot\")\n)\n\nserver <- function(input, output, session) {\n  dataset <- reactive({\n    get(input$dataset, \"package:ggplot2\")\n  })\n  output$summmry <- renderPrint({\n    summary(dataset())\n  })\n  output$plot <- renderPlot({\n    plot(dataset)\n  }, res = 96)\n}\n\nshinyApp(ui, server)以下 app 与您在本章前面看到的 app 非常相似：您从包中选择一个数据集（这次我们使用 ggplot2 包），然后该 app 打印出数据的摘要和绘图。\n它还遵循良好实践并利用响应式表达式来避免代码冗余。\n然而，下面提供的代码中存在三个错误。\n你能找到并修复它们吗？","code":"\ntableOutput(\"mortgage\")\noutput$greeting <- renderText({\n  paste0(\"Hello \", input$name)\n})\nnumericInput(\"age\", \"How old are you?\", value = NA)\ntextInput(\"name\", \"What's your name?\")\ntextOutput(\"greeting\")\noutput$histogram <- renderPlot({\n  hist(rnorm(1000))\n}, res = 96)\nlibrary(shiny)\n\nui <- fluidPage(\n  sliderInput(\"x\", label = \"If x is\", min = 1, max = 50, value = 30),\n  \"then x times 5 is\",\n  textOutput(\"product\")\n)\n\nserver <- function(input, output, session) {\n  output$product <- renderText({ \n    x * 5\n  })\n}\n\nshinyApp(ui, server)\nlibrary(shiny)\n\nui <- fluidPage(\n  sliderInput(\"x\", \"If x is\", min = 1, max = 50, value = 30),\n  sliderInput(\"y\", \"and y is\", min = 1, max = 50, value = 5),\n  \"then, (x * y) is\", textOutput(\"product\"),\n  \"and, (x * y) + 5 is\", textOutput(\"product_plus5\"),\n  \"and (x * y) + 10 is\", textOutput(\"product_plus10\")\n)\n\nserver <- function(input, output, session) {\n  output$product <- renderText({ \n    product <- input$x * input$y\n    product\n  })\n  output$product_plus5 <- renderText({ \n    product <- input$x * input$y\n    product + 5\n  })\n  output$product_plus10 <- renderText({ \n    product <- input$x * input$y\n    product + 10\n  })\n}\n\nshinyApp(ui, server)\nlibrary(shiny)\nlibrary(ggplot2)\n#> Warning: package 'ggplot2' was built under R version 4.2.3\n\ndatasets <- c(\"economics\", \"faithfuld\", \"seals\")\nui <- fluidPage(\n  selectInput(\"dataset\", \"Dataset\", choices = datasets),\n  verbatimTextOutput(\"summary\"),\n  tableOutput(\"plot\")\n)\n\nserver <- function(input, output, session) {\n  dataset <- reactive({\n    get(input$dataset, \"package:ggplot2\")\n  })\n  output$summmry <- renderPrint({\n    summary(dataset())\n  })\n  output$plot <- renderPlot({\n    plot(dataset)\n  }, res = 96)\n}\n\nshinyApp(ui, server)"},{"path":"basic-ui.html","id":"basic-ui","chapter":"2 Basic UI","heading":"2 Basic UI","text":"","code":""},{"path":"basic-ui.html","id":"introduction-1","chapter":"2 Basic UI","heading":"2.1 Introduction","text":"现在您已经掌握了一个基本的 app，我们可以开始探索让 Shiny 发挥作用的细节。\n正如您在上一章中看到的，Shiny 鼓励将生成用户界面（前端）的代码与驱动应用程序行为的代码（后端）分离。在本章中，我们将重点关注前端，并带您快速了解 Shiny 提供的 HTML 输入和输出。\n这使您能够捕获多种类型的数据并显示多种类型的 R 输出。\n你还没有很多方法将输入和输出拼接在一起，但我们将在 Chapter ?? 中回到这一点。在这里，我将主要坚持 Shiny 本身内置的输入和输出。\n然而，有一个丰富且充满活力的扩展包社区，例如 shinyWidgets、colorpicker、和 sorttable。\n您可以在 https://github.com/nanxstats/awesome-shiny-extensions 找到全面的、积极维护的其他软件包列表，由 Nan Xiao 维护。像往常一样，我们将首先加载 shiny 包：","code":"\nlibrary(shiny)"},{"path":"basic-ui.html","id":"inputs","chapter":"2 Basic UI","heading":"2.2 Inputs","text":"saw previous chapter, use functions like sliderInput(), selectInput(), textInput(), numericInput() insert input controls UI specification.\nNow ’ll discuss common structure underlies input functions give quick overview inputs built Shiny.","code":""},{"path":"basic-ui.html","id":"common-structure","chapter":"2 Basic UI","heading":"2.2.1 Common structure","text":"input functions first argument: inputId.\nidentifier used connect front end back end: UI input ID \"name\", server function access input$name.inputId two constraints:must simple string contains letters, numbers, underscores (spaces, dashes, periods, special characters allowed!).\nName like name variable R.must simple string contains letters, numbers, underscores (spaces, dashes, periods, special characters allowed!).\nName like name variable R.must unique.\n’s unique, ’ll way refer control server function!must unique.\n’s unique, ’ll way refer control server function!input functions second parameter called label.\nused create human-readable label control.\nShiny doesn’t place restrictions string, ’ll need carefully think make sure app usable humans!\nthird parameter typically value, , possible, lets set default value.\nremaining parameters unique control.creating input, recommend supplying inputId label arguments position, arguments name:following sections describe inputs built Shiny, loosely grouped according type control create.\ngoal give rapid overview options, exhaustively describe arguments.\n’ll show important parameters control , ’ll need read documentation get full details.","code":"\nsliderInput(\"min\", \"Limit (minimum)\", value = 50, min = 0, max = 100)"},{"path":"basic-ui.html","id":"free-text","chapter":"2 Basic UI","heading":"2.2.2 Free text","text":"Collect small amounts text textInput(), passwords passwordInput()3, paragraphs text textAreaInput().want ensure text certain properties can use validate(), ’ll come back Chapter ??.","code":"\nui <- fluidPage(\n  textInput(\"name\", \"What's your name?\"),\n  passwordInput(\"password\", \"What's your password?\"),\n  textAreaInput(\"story\", \"Tell me about yourself\", rows = 3)\n)"},{"path":"basic-ui.html","id":"numeric-inputs","chapter":"2 Basic UI","heading":"2.2.3 Numeric inputs","text":"collect numeric values, create constrained text box numericInput() slider sliderInput().\nsupply length-2 numeric vector default value sliderInput(), get “range” slider two ends.Generally, recommend using sliders small ranges, cases precise value important.\nAttempting precisely select number small slider exercise frustration!Sliders extremely customisable many ways tweak appearance.\nSee ?sliderInput https://shiny.rstudio.com/articles/sliders.html details.","code":"\nui <- fluidPage(\n  numericInput(\"num\", \"Number one\", value = 0, min = 0, max = 100),\n  sliderInput(\"num2\", \"Number two\", value = 50, min = 0, max = 100),\n  sliderInput(\"rng\", \"Range\", value = c(10, 20), min = 0, max = 100)\n)"},{"path":"basic-ui.html","id":"dates","chapter":"2 Basic UI","heading":"2.2.4 Dates","text":"Collect single day dateInput() range two days dateRangeInput().\nprovide convenient calendar picker, additional arguments like datesdisabled daysofweekdisabled allow restrict set valid inputs.Date format, language, day week starts defaults US standards.\ncreating app international audience, set format, language, weekstart dates natural users.","code":"\nui <- fluidPage(\n  dateInput(\"dob\", \"When were you born?\"),\n  dateRangeInput(\"holiday\", \"When do you want to go on vacation next?\")\n)"},{"path":"basic-ui.html","id":"limited-choices","chapter":"2 Basic UI","heading":"2.2.5 Limited choices","text":"two different approaches allow user choose prespecified set options: selectInput() radioButtons().Radio buttons two nice features: show possible options, making suitable short lists, via choiceNames/choiceValues arguments, can display options plain text.\nchoiceNames determines shown user; choiceValues determines returned server function.Dropdowns created selectInput() take amount space, regardless number options, making suitable longer options.\ncan also set multiple = TRUE allow user select multiple elements.large set possible options, may want use “server-side” selectInput() complete set possible options embedded UI (can make slow load), instead sent needed server.\ncan learn advanced topic https://shiny.rstudio.com/articles/selectize.html#server-side-selectize.’s way select multiple values radio buttons, ’s alternative ’s conceptually similar: checkboxGroupInput().want single checkbox single yes/question, use checkboxInput():","code":"\nanimals <- c(\"dog\", \"cat\", \"mouse\", \"bird\", \"other\", \"I hate animals\")\n\nui <- fluidPage(\n  selectInput(\"state\", \"What's your favourite state?\", state.name),\n  radioButtons(\"animal\", \"What's your favourite animal?\", animals)\n)\nui <- fluidPage(\n  radioButtons(\"rb\", \"Choose one:\",\n    choiceNames = list(\n      icon(\"angry\"),\n      icon(\"smile\"),\n      icon(\"sad-tear\")\n    ),\n    choiceValues = list(\"angry\", \"happy\", \"sad\")\n  )\n)\nui <- fluidPage(\n  selectInput(\n    \"state\", \"What's your favourite state?\", state.name,\n    multiple = TRUE\n  )\n)\nui <- fluidPage(\n  checkboxGroupInput(\"animal\", \"What animals do you like?\", animals)\n)\nui <- fluidPage(\n  checkboxInput(\"cleanup\", \"Clean up?\", value = TRUE),\n  checkboxInput(\"shutdown\", \"Shutdown?\")\n)"},{"path":"basic-ui.html","id":"file-uploads","chapter":"2 Basic UI","heading":"2.2.6 File uploads","text":"Allow user upload file fileInput():fileInput() requires special handling server side, discussed detail Chapter ??.","code":"\nui <- fluidPage(\n  fileInput(\"upload\", NULL)\n)"},{"path":"basic-ui.html","id":"action-buttons","chapter":"2 Basic UI","heading":"2.2.7 Action buttons","text":"Let user perform action actionButton() actionLink():Actions links buttons naturally paired observeEvent() eventReactive() server function.\nhaven’t learned important functions yet, ’ll come back Section ??.can customise appearance using class argument using one \"btn-primary\", \"btn-success\", \"btn-info\", \"btn-warning\", \"btn-danger\".\ncan also change size \"btn-lg\", \"btn-sm\", \"btn-xs\".\nFinally, can make buttons span entire width element embedded within using \"btn-block\".class argument works setting class attribute underlying HTML, affects element styled.\nsee options, can read documentation Bootstrap, CSS design system used Shiny: <http://bootstrapdocs.com/v3.3.6/docs/css/#buttons>.","code":"\nui <- fluidPage(\n  actionButton(\"click\", \"Click me!\"),\n  actionButton(\"drink\", \"Drink me!\", icon = icon(\"cocktail\"))\n)\nui <- fluidPage(\n  fluidRow(\n    actionButton(\"click\", \"Click me!\", class = \"btn-danger\"),\n    actionButton(\"drink\", \"Drink me!\", class = \"btn-lg btn-success\")\n  ),\n  fluidRow(\n    actionButton(\"eat\", \"Eat me!\", class = \"btn-block\")\n  )\n)"},{"path":"basic-ui.html","id":"exercises-1","chapter":"2 Basic UI","heading":"2.2.8 Exercises","text":"space premium, ’s useful label text boxes using placeholder appears inside text entry area.\ncall textInput() generate UI ?\nspace premium, ’s useful label text boxes using placeholder appears inside text entry area.\ncall textInput() generate UI ?Carefully read documentation sliderInput() figure create date slider, shown .\nCarefully read documentation sliderInput() figure create date slider, shown .Create slider input select values 0 100 interval selectable value slider 5.\n, add animation input widget user presses play input widget scrolls range automatically.Create slider input select values 0 100 interval selectable value slider 5.\n, add animation input widget user presses play input widget scrolls range automatically.moderately long list selectInput(), ’s useful create sub-headings break list pieces.\nRead documentation figure .\n(Hint: underlying HTML called <optgroup>.)moderately long list selectInput(), ’s useful create sub-headings break list pieces.\nRead documentation figure .\n(Hint: underlying HTML called <optgroup>.)","code":""},{"path":"basic-ui.html","id":"outputs","chapter":"2 Basic UI","heading":"2.3 Outputs","text":"Outputs UI create placeholders later filled server function.\nLike inputs, outputs take unique ID first argument4: UI specification creates output ID \"plot\", ’ll access server function output$plot.output function front end coupled render function back end.\nthree main types output, corresponding three things usually include report: text, tables, plots.\nfollowing sections show basics output functions front end, along corresponding render functions back end.","code":""},{"path":"basic-ui.html","id":"text","chapter":"2 Basic UI","heading":"2.3.1 Text","text":"Output regular text textOutput() fixed code console output verbatimTextOutput().Note {} required render functions need run multiple lines code.\n’ll learn shortly, little computation render functions possible, means can often omit .\n’s server function look like written compactly::Note two render functions behave slightly differently:renderText() combines result single string, usually paired textOutput()renderPrint() prints result, R console, usually paired verbatimTextOutput().can see difference toy app:equivalent difference cat() print() base R.","code":"\nui <- fluidPage(\n  textOutput(\"text\"),\n  verbatimTextOutput(\"code\")\n)\nserver <- function(input, output, session) {\n  output$text <- renderText({ \n    \"Hello friend!\" \n  })\n  output$code <- renderPrint({ \n    summary(1:10) \n  })\n}\nserver <- function(input, output, session) {\n  output$text <- renderText(\"Hello friend!\")\n  output$code <- renderPrint(summary(1:10))\n}\nui <- fluidPage(\n  textOutput(\"text\"),\n  verbatimTextOutput(\"print\")\n)\nserver <- function(input, output, session) {\n  output$text <- renderText(\"hello!\")\n  output$print <- renderPrint(\"hello!\")\n}"},{"path":"basic-ui.html","id":"tables","chapter":"2 Basic UI","heading":"2.3.2 Tables","text":"two options displaying data frames tables:tableOutput() renderTable() render static table data, showing data .tableOutput() renderTable() render static table data, showing data .dataTableOutput() renderDataTable() render dynamic table, showing fixed number rows along controls change rows visible.dataTableOutput() renderDataTable() render dynamic table, showing fixed number rows along controls change rows visible.tableOutput() useful small, fixed summaries (e.g. model coefficients); dataTableOutput() appropriate want expose complete data frame user.\nwant greater control output dataTableOutput(), highly recommend reactable package Greg Lin.","code":"\nui <- fluidPage(\n  tableOutput(\"static\"),\n  dataTableOutput(\"dynamic\")\n)\nserver <- function(input, output, session) {\n  output$static <- renderTable(head(mtcars))\n  output$dynamic <- renderDataTable(mtcars, options = list(pageLength = 5))\n}"},{"path":"basic-ui.html","id":"plots","chapter":"2 Basic UI","heading":"2.3.3 Plots","text":"can display type R graphic (base, ggplot2, otherwise) plotOutput() renderPlot():default, plotOutput() take full width container (shortly), 400 pixels high.\ncan override defaults height width arguments.\nrecommend always setting res = 96 make Shiny plots match see RStudio closely possible.Plots special outputs can also act inputs.\nplotOutput() number arguments like click, dblclick, hover.\npass string, like click = \"plot_click\", ’ll create reactive input (input$plot_click) can use handle user interaction plot, e.g. clicking plot.\n’ll come back interactive plots Shiny Chapter ??.","code":"\nui <- fluidPage(\n  plotOutput(\"plot\", width = \"400px\")\n)\nserver <- function(input, output, session) {\n  output$plot <- renderPlot(plot(1:5), res = 96)\n}"},{"path":"basic-ui.html","id":"downloads","chapter":"2 Basic UI","heading":"2.3.4 Downloads","text":"can let user download file downloadButton() downloadLink().\nrequire new techniques server function, ’ll come back Chapter ??.","code":""},{"path":"basic-ui.html","id":"exercises-2","chapter":"2 Basic UI","heading":"2.3.5 Exercises","text":"textOutput() verbatimTextOutput() following render functions paired ?\nrenderPrint(summary(mtcars))\nrenderText(\"Good morning!\")\nrenderPrint(t.test(1:5, 2:6))\nrenderText(str(lm(mpg ~ wt, data = mtcars)))\ntextOutput() verbatimTextOutput() following render functions paired ?renderPrint(summary(mtcars))renderPrint(summary(mtcars))renderText(\"Good morning!\")renderText(\"Good morning!\")renderPrint(t.test(1:5, 2:6))renderPrint(t.test(1:5, 2:6))renderText(str(lm(mpg ~ wt, data = mtcars)))renderText(str(lm(mpg ~ wt, data = mtcars)))Re-create Shiny app Section 2.3.3, time setting height 300px width 700px.\nSet plot “alt” text visually impaired user can tell scatterplot five random numbers.Re-create Shiny app Section 2.3.3, time setting height 300px width 700px.\nSet plot “alt” text visually impaired user can tell scatterplot five random numbers.Update options call renderDataTable() data displayed, controls suppress (.e. remove search, ordering, filtering commands).\n’ll need read ?renderDataTable review options https://datatables.net/reference/option/.\n\nui <- fluidPage(\n  dataTableOutput(\"table\")\n)\nserver <- function(input, output, session) {\n  output$table <- renderDataTable(mtcars, options = list(pageLength = 5))\n}Update options call renderDataTable() data displayed, controls suppress (.e. remove search, ordering, filtering commands).\n’ll need read ?renderDataTable review options https://datatables.net/reference/option/.Alternatively, read reactable, convert app use instead.Alternatively, read reactable, convert app use instead.","code":"\nui <- fluidPage(\n  dataTableOutput(\"table\")\n)\nserver <- function(input, output, session) {\n  output$table <- renderDataTable(mtcars, options = list(pageLength = 5))\n}"},{"path":"basic-ui.html","id":"summary-1","chapter":"2 Basic UI","heading":"2.4 Summary","text":"chapter introduced major input output functions make front end Shiny app.\nbig info dump, don’t expect remember everything single read.\nInstead, come back chapter ’re looking specific component: can quickly scan figures, find code need.next chapter, ’ll move back end Shiny app: R code makes user interface come life.","code":""}]
